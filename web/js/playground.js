/* 
 * App specific functions.  This is for unique functionality and application initialization.  
 */


// Identify playground configuration.  Will be available as github CDN.
import { default as PLAYGROUND } from 'https://centerfordigitalhumanities.github.io/rerum-playground/web/js/config.js'
    
// Playground scripting utilities.  Will be available as github CDN.
import { default as UTILS } from 'https://centerfordigitalhumanities.github.io/rerum-playground/web/js/utilities.js'

/**
*  Landing behavior for tools.  This should populate the set of available tools to the DOM.
*/
function initializeTools(config) {
    return new Promise((res) => {
        const setContainer = document.getElementById("tool_set")
        Array.from(config.REGISTRY).forEach(thumbnailGenerator => {
            setContainer.innerHTML += thumbnailGenerator()
        })
        
        /**
         * Really each render should be a promise and we should return a Promise.all() here of some kind.
         * That would only work if PlaygroundRender resulted in a Promise where we could return Promise.all(renderPromises).
         */
        setTimeout(res, 200) //A small hack to ensure all the HTML generated by processing the views enters the DOM before this says it has resolved.
    })
}

/**
*  Landing behavior for interfaces.  This should populate the set of available interfaces to the DOM.
*/
function initializeInterfaces(config) {
    return new Promise((res) => {
        const setContainer = document.getElementById("interfaces_set")
        Array.from(config.REGISTRY).forEach(thumbnailGenerator => {
            setContainer.innerHTML += thumbnailGenerator()
        })
        UTILS.broadcast(undefined, PLAYGROUND.EVENTS.LOADED, setContainer, {})
        /**
         * Really each render should be a promise and we should return a Promise.all() here of some kind.
         * That would only work if PlaygroundRender resulted in a Promise where we could return Promise.all(renderPromises).
         */
        setTimeout(res, 200) //A small hack to ensure all the HTML generated by processing the views enters the DOM before this says it has resolved.
    })
}

/**
*  Landing behavior for technologies.  This should populate the technologies to the DOM.
*/
function initializeTechnologies(config) {
    return new Promise((res) => {
        const setContainer = document.getElementById("technologies_set")
        Array.from(config.REGISTRY).forEach(thumbnailGenerator => {
            setContainer.innerHTML += thumbnailGenerator()
        })
        UTILS.broadcast(undefined, PLAYGROUND.EVENTS.LOADED, setContainer, {})
        /**
         * Really each render should be a promise and we should return a Promise.all() here of some kind.
         * That would only work if PlaygroundRender resulted in a Promise where we could return Promise.all(renderPromises).
         */
        setTimeout(res, 200) //A small hack to ensure all the HTML generated by processing the views enters the DOM before this says it has resolved.
    })
}

/**
*  These are promises so we can control the chaining how we like, if necessary.
*/
try {
    initializeTools(PLAYGROUND.TOOLS)
    initializeInterfaces(PLAYGROUND.INTERFACES)
    initializeTechnologies(PLAYGROUND.TECHNOLOGIES)
} catch (err) {
    
}
    